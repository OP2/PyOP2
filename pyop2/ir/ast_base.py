# This file contains the hierarchy of classes that implement a kernel's
# Abstract Syntax Tree (ast)


class Node(object):

    """The base class of the AST."""

    def __init__(self):
        self.children = []

    def gencode(self):
        code = ""
        for n in self.children:
            code += n.gencode()
        return code


class Root(Node):

    """Root of the AST."""

    def __init__(self):
        Node.__init__(self)

    def gencode(self):
        header = '"This code is generated by reading an AST\n"'
        return header + Node.gencode(self)


# Expressions ###

class Expr(Node):

    def __init__(self):
        Node.__init__(self)


class Parentheses(Expr):

    def __init__(self):
        Expr.__init__(self)

    def gencode(self):
        return "(" + self.children[0].gencode() + ")"


class Sum(Expr):

    def __init__(self):
        Expr.__init__(self)

    def gencode(self):
        return " + ".join([n.gencode() for n in self.children])


class Symbol(Expr):

    def __init__(self, symbol):
        Expr.__init__(self)
        self.symbol = symbol

    def gencode(self):
        return str(self.symbol)

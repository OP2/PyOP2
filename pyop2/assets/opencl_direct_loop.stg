group opencl_direct_loop;

direct_loop(parloop,const)::=<<
$header(const)$
$parloop._kernel._code$
$kernel_stub(parloop=parloop)$
>>

kernel_stub(parloop)::=<<
__kernel
void $parloop._kernel._name$_stub (
  $parloop._args:{__global $it._dat._cl_type$* $it._dat._name$};separator=",\n"$
)
{
  unsigned int shared_memory_offset = $const.shared_memory_offset$;
  unsigned int set_size = $parloop._it_space._size$;

  __local char shared[$const.dynamic_shared_memory_size$];
  __local char* shared_pointer;

  $parloop._stagged_args:{__private $it._dat._cl_type$ $it._dat._name$_local[$it._dat._dim$];};separator="\n"$

  int i_1;
  int i_2;

  int local_offset;
  int active_threads_count;
  int thread_id;

  thread_id = get_local_id(0) % OP_WARPSIZE;
  shared_pointer = shared + shared_memory_offset * (get_local_id(0) / OP_WARPSIZE);

  for (i_1 = get_global_id(0); i_1 < set_size; i_1 += get_global_size(0))
  {
    local_offset = i_1 - thread_id;
    active_threads_count = MIN(OP_WARPSIZE, set_size - local_offset);

    $parloop._stagged_in_args:stagein();separator="\n"$
    $kernel_call(parloop=parloop)$
    $parloop._stagged_out_args:stageout();separator="\n"$
  }
}
>>

stagein(arg)::=<<
// $arg._dat._name$
for (i_2 = 0; i_2 < $arg._dat._dim$; ++i_2) {
  (($arg._dat._cl_type$*) shared_pointer)[thread_id + i_2 * active_threads_count] = $arg._dat._name$[thread_id + i_2 * active_threads_count + local_offset * 1];
}
for (i_2 = 0; i_2 < $arg._dat._dim$; ++i_2) {
  $arg._dat._name$_local[i_2] = (($arg._dat._cl_type$*) shared_pointer)[i_2 + thread_id * 1];
}
>>

stageout(arg)::=<<
// $arg._dat._name$
for (i_2 = 0; i_2 < $arg._dat._dim$; ++i_2) {
  (($arg._dat._cl_type$*) shared_pointer)[i_2 + thread_id * 1] = $arg._dat._name$_local[i_2];
}
for (i_2 = 0; i_2 < $arg._dat._dim$; ++i_2) {
  $arg._dat._name$[thread_id + i_2 * active_threads_count + local_offset * 1] = (($arg._dat._cl_type$*) shared_pointer)[thread_id + i_2 * active_threads_count];
}
>>

kernel_call(parloop)::=<<$parloop._kernel._name$($parloop._args:{$it._dat._name$_local};separator=", "$);>>


header(const)::=<<
#define OP_WARPSIZE $const.warpsize$
#define MIN(a,b) ((a < b) ? (a) : (b))
>>

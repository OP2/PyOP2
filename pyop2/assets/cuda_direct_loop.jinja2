{% import 'device_common.jinja2' as common %}
{% import 'cuda_reductions.jinja2' as reduction with context %}


{%- macro kernel_call(loop_idx) -%}
{{ parloop.kernel.name }}(
    {%- set comma = joiner(", ") -%}
    {%- for arg in parloop.args -%}
    {{- comma() -}}
    {{ arg._direct_kernel_arg_name(loop_idx) }}
    {%- endfor -%}
    );
{%- endmacro -%}


{%- macro kernel_stub() -%}
__global__ void {{ parloop._stub_name }} (int set_size
    {%- for arg in parloop.args -%}
    ,
    {{ arg.ctype }} *{{arg._name}}
    {%- endfor -%}
    )
{
    {%- if (parloop._needs_shared_memory) %}
    extern __shared__ char shared[];
    {% endif %}

    {%- if (parloop._all_staged_direct_args) -%}
    unsigned int smem_offset = {{ launch.smem_offset }};
    int local_offset;
    int active_threads_count;
    int thread_id = threadIdx.x % {{ launch.WARPSIZE }};
    // thread private storage
    {% for arg in parloop._all_staged_direct_args -%}
    {{ arg.ctype }} {{ arg._local_name() }}[{{ arg.data.cdim }}];
    {% endfor %}
    // smem storage
    {% for arg in parloop._all_staged_direct_args -%}
    {{ arg.ctype }} *{{ arg._shared_name }} = ({{ arg.ctype }} *)(shared + smem_offset * (threadIdx.x / {{ launch.WARPSIZE }}));
    {% endfor -%}
    {%- endif %}

    {% for arg in parloop._all_global_reduction_args -%}
    {{ arg.data.ctype }} {{arg._reduction_local_name}}[{{arg.data.cdim}}];
    {% endfor %}
    
    {% for arg in parloop._all_global_reduction_args %}
    for ( int idx = 0; idx < {{ arg.data.cdim }}; ++idx ) {
        {{ reduction.reduction_init(arg) }}
    }
    {% endfor -%}

    for ( int n = threadIdx.x + blockIdx.x * blockDim.x;
          n < set_size; n+= blockDim.x * gridDim.x ) {
        {% if (parloop._all_staged_direct_args) %}
        local_offset = n - thread_id;
        active_threads_count = min({{ launch.WARPSIZE }}, set_size - local_offset);
        {% endif %}
        {% for arg in parloop._all_staged_in_direct_args %}
        {{ common.stagein(arg)|indent(8) }}
        {% endfor %}
        {{ kernel_call('n') }}
        {% for arg in parloop._all_staged_out_direct_args %}
        {{ common.stageout(arg)|indent(8) }}
        {% endfor %}
    }

    {%- for arg in parloop._all_global_reduction_args %}
    for ( int idx = 0; idx < {{ arg.data.cdim}}; ++idx ) {
        {{ arg._reduction_kernel_name }} (&{{arg._name}}[idx + blockIdx.x * {{arg.data.cdim}}], {{arg._reduction_local_name}}[idx]);
    }
    {% endfor %}
}
{%- endmacro -%}

{% for c in constants -%}
{{ c._format_declaration() }}
{% endfor %}

{%- if parloop._has_soa %}
#define OP2_STRIDE(array, idx) (array)[op2stride * (idx)]
{% endif %}

{{ parloop.kernel.code }}

{% for arg in parloop._all_global_reduction_args -%}
{{ reduction.reduction_kernel(arg) }}
{% endfor %}

{{ kernel_stub() }}

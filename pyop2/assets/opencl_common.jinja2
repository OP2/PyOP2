{#        #}
{# common #}
{#        #}

{%- macro pragma_clext(parloop) -%}
{% if(parloop._matrix_args) %}
#if defined(cl_khr_int64_base_atomics)
#pragma OPENCL EXTENSION cl_khr_int64_base_atomics : enable
#endif
{% endif %}
#if defined(cl_khr_fp64)
#if defined(cl_amd_fp64)
#pragma OPENCL EXTENSION cl_amd_fp64 : enable
#else
#pragma OPENCL EXTENSION cl_khr_fp64 : enable
#endif
#elif defined(cl_amd_fp64)
#pragma OPENCL EXTENSION cl_amd_fp64 : enable
#endif
{%- endmacro -%}

{%- macro defines(launch) -%}
#define ROUND_UP(bytes) (((bytes) + 15) & ~15)
#define OP_WARPSIZE {{ launch.warpsize }}
#define OP2_STRIDE(arr, idx) ((arr)[{{ launch.op2stride }} * (idx)])
{%- endmacro -%}

{#                                    #}
{# global reduction support templates #}
{#                                    #}

{%- macro reduction_id_value(arg) -%}
{%- if(arg._is_INC) -%}
{{ arg.data._cl_type_zero }}
{%- elif(arg._is_MIN) -%}
{{ arg.data._cl_type_max }}
{%- elif(arg._is_MAX) -%}
{{ arg.data._cl_type_min }}
{%- endif -%}
{%- endmacro -%}

{%- macro reduction_op(arg) -%}
{%- if(arg._is_INC) -%}
reduction_tmp_array[lid] += reduction_tmp_array[lid + offset];
{%- elif(arg._is_MIN) -%}
reduction_tmp_array[lid] = min(reduction_tmp_array[lid], reduction_tmp_array[lid + offset]);
{%- elif(arg._is_MAX) -%}
reduction_tmp_array[lid] = max(reduction_tmp_array[lid], reduction_tmp_array[lid + offset]);
{%- endif -%}
{%- endmacro -%}

{%- macro reduction_kernel(arg) -%}
__kernel
void {{ arg._reduction_kernel_name }} (
  __global {{ arg.data._cl_type }} *reduction_result,
  __private {{ arg.data._cl_type }} input_value,
  __local {{ arg.data._cl_type }} *reduction_tmp_array
) {
  barrier(CLK_LOCAL_MEM_FENCE);
  int lid = get_local_id(0);
  reduction_tmp_array[lid] = input_value;
  barrier(CLK_LOCAL_MEM_FENCE);

  for(int offset = 1; offset < (int)get_local_size(0); offset <<= 1) {
    int mask = (offset << 1) - 1;
    if(((lid & mask) == 0) && (lid + offset < (int)get_local_size(0))) {
      {{ reduction_op(arg) }}
    }
    barrier(CLK_LOCAL_MEM_FENCE);
  }

  if (lid == 0)
    *reduction_result = reduction_tmp_array[0];
}
{%- endmacro -%}


{#                          #}
{# matrix support templates #}
{#                          #}

{%- macro union_decl() -%}
  union {
    unsigned long dummy;
    double val;
  } new;

  union {
    unsigned long dummy;
    double val;
  } old;
{%- endmacro -%}

{%- macro matrix_support() -%}
// Matrix support code

void matrix_atomic_add(__global double* dst, double value);
void matrix_atomic_add(__global double* dst, double value)
{
#if defined(cl_khr_int64_base_atomics)
  {{ union_decl() }}
  do
  {
    old.val = *dst;
    new.val = old.val + value;
  } while (atom_cmpxchg((volatile __global unsigned long int*) dst, old.dummy, new.dummy) != old.dummy);
#else
  *dst = *dst + value;
#endif
}

void matrix_atomic_set(__global double* dst, double value);
void matrix_atomic_set(__global double* dst, double value)
{
#if defined(cl_khr_int64_base_atomics)
  {{ union_decl() }}
  do
  {
    old.val = *dst;
    new.val = value;
  } while (atom_cmpxchg((volatile __global unsigned long int*) dst, old.dummy, new.dummy) != old.dummy);
#else
  *dst = value;
#endif
}

int rc2offset(__global int* mat_rowptr, __global int* mat_colidx, int r, int c);
int rc2offset(__global int* mat_rowptr, __global int* mat_colidx, int r, int c)
{
  int offset = mat_rowptr[r];
  int end = mat_rowptr[r+1];
  __global int * cursor;
  for (cursor = &mat_colidx[offset]; cursor < &mat_colidx[end]; ++cursor)
  {
    if (*cursor == c) break;
    ++offset;
  }
  return offset;
}

void matrix_add(__global double* mat_array, __global int* mat_rowptr, __global int* mat_colidx, int r, int c, double v);
void matrix_add(__global double* mat_array, __global int* mat_rowptr, __global int* mat_colidx, int r, int c, double v)
{
  int offset = rc2offset(mat_rowptr, mat_colidx, r, c);
  matrix_atomic_add(mat_array + offset, v);
}

void matrix_set(__global double* mat_array, __global int* mat_rowptr, __global int* mat_colidx, int r, int c, double v);
void matrix_set(__global double* mat_array, __global int* mat_rowptr, __global int* mat_colidx, int r, int c, double v)
{
  int offset = rc2offset(mat_rowptr, mat_colidx, r, c);
  matrix_atomic_set(mat_array + offset, v);
}
{%- endmacro -%}

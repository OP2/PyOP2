{% import 'opencl_common.jinja2' as common %}
{% import 'device_common.jinja2' as device %}

{%- macro header() -%}
/* Launch configuration:
 *   work group size     : {{ launch.work_group_size }}
 *   local memory size   : {{ launch.local_memory_size }}
 *   local memory offset : {{ launch.local_memory_offset }}
 *   warpsize            : {{ launch.warpsize }}
 */
{{ common.pragma_clext(parloop) }}

{{ common.defines(launch) }}
{%- endmacro -%}

{%- macro kernel_call_const_args() -%}
{%- for c in op2const -%}
, {% if(c._is_scalar) %}*{% endif %}{{ c.name }}
{% endfor -%}
{%- endmacro -%}

{%- macro kernel_call(idx=None) -%}
{%- for it in parloop._it_space._extent_ranges %}
for (int idx_{{ loop.index0 }} = 0; idx_{{ loop.index0 }} < {{ it }}; ++idx_{{ loop.index0 }}) {
{%- endfor %}
{% for arg in parloop._matrix_args %}
{% for dim in arg.data.sparsity.dims %}
for (int i{{ loop.index0 }}=0; i{{ loop.index0 }}<{{ dim }}; ++i{{ loop.index0 }})
{%- endfor %}
  {{ arg._mat_entry_name }}[i0][i1] = {{ arg.data._cl_type_zero }};
{% endfor %}

{{ parloop._kernel.name }}(
    {%- set comma = joiner(', ') -%}
    {%- for arg in parloop.args -%}
    {{- comma() }}
    {{ arg._direct_kernel_arg_name(idx=idx, subset=launch.subset) }}
    {% endfor -%}
    {{- kernel_call_const_args() }}
    {%- for ext in parloop._it_space._extent_ranges -%}
    , idx_{{ loop.index0 }}
    {% endfor -%}
    );

{% for arg in parloop._matrix_args -%}
{% for dim in arg.data.sparsity.dims %}
for (int i{{ loop.index0 }}=0; i{{ loop.index0 }}<{{ dim }}; ++i{{ loop.index0 }})
{%- endfor %}
  {% if(arg._is_INC) -%}
    matrix_add
  {%- else -%}
    matrix_set
  {%- endif -%}(
    {{ arg.name }},
    {{ arg.name }}_rowptr,
    {{ arg.name }}_colidx,
    {%- for map in arg._map %}
    {% set ext = parloop._it_space._extent_ranges[loop.index0] -%}
    {% set dim = arg.data.sparsity.dims[loop.index0] -%}
    {{ dim }}*{{ map.name }}[i_1 * {{ ext }} + idx_{{ loop.index0 }}]+i{{ loop.index0 }},
    {%- endfor %}
      {{ arg._mat_entry_name }}[i0][i1]
  );
{% endfor %}
{%- for it in parloop._it_space._extent_ranges %}
}
{%- endfor -%}
{%- endmacro -%}

{%- macro kernel_stub() -%}
__kernel
__attribute__((reqd_work_group_size({{ launch.work_group_size }}, 1, 1)))
    void {{ parloop._stub_name }} (
  {%- for arg in parloop._unique_dat_args -%}
  __global {{ arg.data._cl_type }} *{{ arg.name }},
  {% endfor -%}
  {%- for arg in parloop._all_global_reduction_args -%}
  __global {{ arg.data._cl_type }} *{{ arg.name }},
  {% endfor -%}
  {%- for arg in parloop._all_global_non_reduction_args -%}
  __global {{ arg.data._cl_type }} *{{ arg.name }},
  {% endfor -%}
  {%- for c in op2const -%}
  __constant {{ c._cl_type }} *{{ c.name }},
  {% endfor -%}
  {% for arg in parloop._matrix_args %}
  __global {{ arg.data._cl_type }}* {{ arg.name }},
  __global int* {{ arg.name }}_rowptr,
  __global int* {{ arg.name }}_colidx,
  {% endfor -%}
  {% for matem in parloop._matrix_entry_maps -%}
  __global int* {{ matem.name }},
  {%- endfor %}
  int set_size,
  int set_offset
  {%- if launch.subset %}
  , __global int* _ssinds
  {% endif -%}
  ) {
  {% if(parloop._needs_shared_memory) -%}
  __local char shared[{{ launch.local_memory_size }}] __attribute__((aligned(sizeof(long))));
  {%- endif %}
  int i_1;
  /*
   * Alias non-unique arguments where appropriate
   */
  {% for arg in parloop._unique_dat_args -%}
    {%- for arg2 in parloop._aliased_dat_args -%}
    {%- if(arg.data == arg2.data and arg.name != arg2.name) -%}
  __global {{ arg2.data._cl_type }} *{{ arg2.name }} = {{ arg.name }};
    {% endif -%}
    {% endfor -%}
  {% endfor -%}
  {% if(parloop._needs_shared_memory) -%}
  int thread_id = get_local_id(0) % OP_WARPSIZE;
  {% if parloop._all_staged_direct_args %}
  unsigned int shared_memory_offset = {{ launch.local_memory_offset }};
  int local_offset;
  int active_threads_count;
  {% endif %}

  {%- for arg in parloop._all_staged_direct_args -%}
  __private {{ arg.data._cl_type }} {{ arg._local_name() }}[{{ arg.data.cdim }}];
  {% endfor %}

  {% for arg in parloop._all_staged_direct_args -%}
  __local {{ arg.data._cl_type }} *{{ arg._shared_name }} = (__local {{ arg.data._cl_type }}*) (shared + shared_memory_offset * (get_local_id(0) / OP_WARPSIZE));
  {% endfor %}
  {%- endif %}

  {% for arg in parloop._all_global_reduction_args -%}
  __private {{ arg.data._cl_type }} {{ arg._reduction_local_name }}[{{ arg.data.cdim }}];
  {% endfor %}

  {% for arg in parloop._all_global_reduction_args -%}
  __local {{ arg.data._cl_type }}* {{ arg.name }}_reduc_tmp = (__local {{ arg.data._cl_type }}*) shared;
  {% endfor %}

  {% if(parloop._matrix_args) %}
  // local matrix entry
  {% for arg in parloop._matrix_args %}
  __private {{ arg.data._cl_type }} {{ arg._mat_entry_name }}{%- for dim in arg.data.sparsity.dims -%}[{{ dim }}]
  {%- endfor -%};
  {% endfor %}
  {% endif %}

  // reduction zeroing
  {% for arg in parloop._all_global_reduction_args %}
  for (i_1 = 0; i_1 < {{ arg.data.cdim }}; ++i_1)
    {{ arg._reduction_local_name }}[i_1] = {{ common.reduction_id_value(arg) }};
  {% endfor %}

  for (i_1 = set_offset + get_global_id(0);
       i_1 < (set_offset + set_size);
       i_1 += get_global_size(0))
  {
    {%- if (parloop._all_staged_direct_args) %}
    local_offset = i_1 - thread_id;
    active_threads_count = min(OP_WARPSIZE, set_offset + set_size - local_offset);
    {%- endif -%}

    {% for arg in parloop._all_staged_in_direct_args -%}
    {{ device.stagein(arg) }}
    {% endfor %}
    {{ kernel_call('i_1') }}
    {% for arg in parloop._all_staged_out_direct_args %}
    {{ device.stageout(arg) }}
    {%- endfor %}
  }

  {% if(parloop._all_global_reduction_args) %}
  // on device reduction
  {% for arg in parloop._all_global_reduction_args %}
  for (i_1 = 0; i_1 < {{ arg.data.cdim }}; ++i_1)
  {{ arg._reduction_kernel_name }}(&{{ arg.name }}[i_1 + get_group_id(0) * {{ arg.data.cdim }}], {{ arg._reduction_local_name }}[i_1], {{ arg.name }}_reduc_tmp);
  {% endfor %}
  {% endif %}
}
{%- endmacro -%}

{{- header() }}
{% for arg in parloop._all_global_reduction_args %}
{{ common.reduction_kernel(arg) }}
{% endfor %}

{% if(parloop._matrix_args) %}
{{ common.matrix_support() }}
{% endif %}

{{- user_kernel }}

{{- kernel_stub() }}

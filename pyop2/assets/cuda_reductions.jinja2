{%- macro reduction_op(arg, lvalue, rvalue) -%}
{%- if(arg._is_INC) -%}
{{lvalue}} += {{rvalue}};
{%- elif(arg._is_MIN) -%}
if ( {{rvalue}} < {{lvalue}} ) {
    {{lvalue}} = {{rvalue}};
}
{%- elif(arg._is_MAX) -%}
if ( {{rvalue}} > {{lvalue}} ) {
    {{lvalue}} = {{rvalue}};
}
{%- endif -%}
{%- endmacro -%}

{%- macro reduction_kernel(arg) -%}
__device__ void {{ arg._reduction_kernel_name }}(
    volatile {{ arg.data.ctype }} *reduction_result,
    {{ arg.data.ctype }} input_value)
{
    extern __shared__ volatile {{ arg.data.ctype }} {{ arg._reduction_tmp_name }}[];
    {{ arg.data.ctype }} dat_t;
    int tid = threadIdx.x;
    __syncthreads();
    {{ arg._reduction_tmp_name }}[tid] = input_value;
    __syncthreads();

    // Fixup non-power of 2 blockDim
    // blockDim.x/2 rounded up to a power of 2
    int d = 1 << (31 - __clz((int)blockDim.x - 1));

    if ( tid + d < blockDim.x ) {
        dat_t = {{ arg._reduction_tmp_name }}[tid + d];
        {{ reduction_op(arg, 'input_value', 'dat_t')|indent(8) }}
        {{ arg._reduction_tmp_name }}[tid] = input_value;
    }

    // Reductions with more than one warp

    for ( d >>= 1; d > {{ launch.WARPSIZE }}; d >>= 1 ) {
        __syncthreads();
        if ( tid < d ) {
            dat_t = {{ arg._reduction_tmp_name }}[tid + d];
            {{ reduction_op(arg, 'input_value', 'dat_t')|indent(12) }}
            {{ arg._reduction_tmp_name }}[tid] = input_value;
        }
    }

    // intra-warp reduction
    __syncthreads();
    if ( tid < {{ launch.WARPSIZE }} ) {
        for ( ; d > 0; d >>= 1 ) {
            if ( tid < d ) {
                dat_t = {{ arg._reduction_tmp_name }}[tid + d];
                {{ reduction_op(arg, 'input_value', 'dat_t')|indent(16) }}
                {{ arg._reduction_tmp_name }}[tid] = input_value;
            }
        }
        // Update global reduction var
        if ( tid == 0 ) {
            {{ reduction_op(arg, '*reduction_result', 'input_value')|indent(12) }}
        }
    }
}
{%- endmacro -%}

{%- macro reduction_init(arg) -%}
{%- if (arg._is_INC) -%}
{{ arg._reduction_local_name }} [idx] = ({{arg.ctype}})0;
{%- else -%}
{{ arg._reduction_local_name }}[idx] = {{arg._name}}[idx + blockIdx.x * {{arg.data.cdim}}];
{%- endif -%}
{%- endmacro -%}
